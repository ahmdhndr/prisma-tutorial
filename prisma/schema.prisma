// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int    @id @default(autoincrement())
  email     String @unique
  firstName String
  lastName  String
  social    Json?

  // Relation fields
  courses    CourseEnrollments[]
  testResult TestResult[]        @relation(name: "results")
  testGradd  TestResult[]        @relation(name: "graded")
}

model Course {
  id            Int     @id @default(autoincrement())
  name          String
  courseDetails String?

  // Relation fields
  members CourseEnrollments[]
  tests   Test[]
}

model Test {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt
  name      String
  date      DateTime

  // Relation fields
  courseId    Int
  course      Course       @relation(fields: [courseId], references: [id])
  testResults TestResult[]
}

model TestResult {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  result    Int // Percentage precise to one decimal point represented as result * 10^-1

  // Relation fields
  testId    Int
  test      Test @relation(fields: [testId], references: [id])
  studentId Int
  student   User @relation(name: "results", fields: [studentId], references: [id])
  graderId  Int
  gradedBy  User @relation(name: "graded", fields: [graderId], references: [id])
}

model CourseEnrollments {
  createdAt DateTime @default(now())
  role      UserRole

  // Relation fields
  userId   Int
  user     User   @relation(fields: [userId], references: [id])
  courseId Int
  course   Course @relation(fields: [courseId], references: [id])

  @@id([userId, courseId, role])
}

enum UserRole {
  STUDENT
  TEACHER
}
